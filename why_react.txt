	- The Stack:
		- React
		- Redux
		- React Router 
		- Redux Thunk (async support for Redux)
		- ImmutableJS
		- ES6/JSX

	- Why?
		- Unidirectional Data Fow
			- 'all data in an application follows the same lifecycle pattern, making the logic of your app more predictable and easier to understand. It also encourages data normalization, so that you don't end up with multiple, independent copies of the same data that are unaware of one another.' (Redux documentation)[http://redux.js.org/docs/basics/DataFlow.html]
			- Store
			- Presenter
			- Smart Component (entry point)
			- Dumb Component
			- Action Creator
		- Component-Oriented design
			- Allows you to compose functional components with display components easily
			- Composition over inheritance makes a more readable code base
			- Component-Oriented design is something we already work with (activity templates)	
			- Allows tree-shaking bundles for faster/smaller page loads		
		- Shared State
			- Tracking usage history
				- We can replay history			
				- We 'could' optimize coach flow by extracting common usage pattern
				- We 'could' debug easier with action/data logs
			- Piecemeal data loading
				- Each component only loads what it needs as it needs it
				- Once loaded, other components can use said data
				- If data is mutated in the store, it is updated everywhere
		- Easy to test/protoype/develop
			- Because the interfaces are identical 
				- Mocking each part easy.
				- Easy to split component development between the team
			- prototyping becomes applicable to the developer's ACTUAL implementation.
				- Acheived by isolating Dumb Component and mocking state
		- JSX is awesome
			- HTML-like makes it easily readable 
		- ES6 is awesome	

- Why Webpack?
	- Explicit Dependencies are great
	- Vendor bundles and global dependencies made easy.
	- Plugins offer useful and standard interfacing with the compile process
	- There's a loader for anything you want. [es6, jsx, scss, elm]
	- Tree Shaking Bundles with require.ensure()
	- Fingerprinting and cache busting with bundle/chunk hashing.